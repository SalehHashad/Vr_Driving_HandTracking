using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//[ExecuteAlways]
public class ESNodeSystem : MonoBehaviour
{
    public enum NodeCreationMethod
    {
        AutoGenerated,
        ManualGenerated
    }
    public NodeCreationMethod GetNodeCreationMethod = NodeCreationMethod.ManualGenerated;
    [Tooltip("Functions when using AutoGenerated, this is the total distance btw each node")]
    public float SpacingDistance = 10f;
    [HideInInspector] public bool AutoGen = false;

    [HideInInspector] public bool done, isclicked, b;
    [HideInInspector] public GameObject nodeprefab;
    [HideInInspector]
    public Transform LastcreatedNode, Pnode;
    [HideInInspector] public List<Transform> nodelist;
    [HideInInspector] public Vector3 lastnodepos;
    [HideInInspector] public Transform[] g;
    //[HideInInspector]
    [Tooltip("ReadOnly")] public int max;

    public enum OverTakeMethod
    {
        Left,
        Right,
        None
    }
    //
    [Header("Experimental")]
    public OverTakeMethod GetOverTakeMethod = OverTakeMethod.None;
    public float ArrowSize = 1;
    [HideInInspector]
    [Tooltip("ReadOnly")] public Material NodeMat;
    public enum AlignAxis
    {
        X,
        Z,
        free
    }
    [HideInInspector]
    public AlignAxis GetAlign = AlignAxis.free;
    [Header("Debug")]
    public float DistanceApart = 0.0f;

    // Update is called once per frame
    void Update()
    {
        if (Application.isPlaying)
        {
            if (nodelist.Count > 0)
            {
                for (int i = 0; i < nodelist.Count; ++i)
                {
                    //nodelist[i].name = "Node" + i.ToString();
                    //if (nodelist[i].GetComponent<MeshRenderer>() != null)
                    //nodelist[i].GetComponent<MeshRenderer>().enabled = false;
                    if (NodeMat == null)
                    {
                        NodeMat = Resources.Load("Node/Trans") as Material;
                    }
                    nodelist[i].GetComponent<MeshRenderer>().sharedMaterial = NodeMat;
                }
            }
        }

    }
    //

    private void OnDrawGizmos()
    {
        Transform[] nodes = GetComponentsInChildren<Transform>();

        nodelist = new List<Transform>();
        for (int i = 0; i < nodes.Length; ++i)
        {
            if (nodes[i] != this.transform)
            {
                if (nodes[i].GetComponent<ESNodeManager>() != null)
                {
                    nodes[i].GetComponent<ESNodeManager>().arrowsize = ArrowSize;
                    nodelist.Add(nodes[i]);
                }
            }
        }
        //
        if (max != nodes.Length)
        {
            if (nodelist.Count > 0)
            {
                for (int i = 0; i < nodelist.Count; ++i)
                {
                    nodelist[i].name = "Node" + i.ToString();

                }
            }
            if (nodelist.Count > 0)
            {
                lastnodepos = nodelist[nodelist.Count - 1].position;
            }
            if (nodelist.Count == 0)
            {
                lastnodepos = Vector3.zero;
            }

            max = nodes.Length;
        }
    }
}
